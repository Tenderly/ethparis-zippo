{"version":3,"sources":["Images/ColoredDarkZippoLogo.svg","Components/Icon/Icon.js","Components/ActionLogs/ActionLogs.js","Components/Loader/Loader.js","Components/Select/Select.js","Components/Button/Button.js","EthereumClient.js","Components/Input/Input.js","Components/Header/Header.js","Common/constants.js","Components/Debugger/Debugger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Icon","_ref","icon","react_default","a","createElement","className","classNames","concat","Log","getLogEntryClass","log","level","this","props","timestamp","format","type","data","message","Components_Icon_Icon","Component","ActionLogs","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","logsLoaded","connected","logs","Moment","details","_this$props","connection","name","url","map","ActionLogs_Log","key","Loader","Select","_this","toggleDropdown","disabled","open","setState","closeDropdown","handleSelect","option","field","onChange","_this$props2","options","value","label","placeholder","react_outside_click_handler_default","onOutsideClick","Disabled","Open","onClick","length","Button","children","color","size","defaultProps","web3","Input","handleInputChange","event","newValue","target","htmlFor","id","Header","src","ZippoLogo","height","alt","web3Account","EthereumClient","Web3","process","console","eth","accounts","method","params","callback","arguments","undefined","calledMethod","apply","toConsumableArray","hasOwnProperty","send","from","on","hash","confirmationNumber","receipt","error","then","result","contractAbi","address","Contract","Debugger","defineProperty","handleMethodInputChange","methodInputs","objectSpread","isFormValid","_this$state","selectedContract","selectedMethod","selectedMethodInputs","sendingTransaction","valid","forEach","methodInput","handleSelectContract","contracts","find","contract","selectedContractMethods","methods","transactionResult","handleSelectContractMethod","inputs","sendTransaction","_this$state2","abi","onTransaction","txContract","transactionMethod","getContract","replace","values","tx","setTimeout","initiallyLoaded","_this$state3","Components_Header_Header","Components_Loader_Loader","Components_Select_Select","Components_Input_Input","Components_Button_Button","JSON","stringify","Message","InitialMessage","networkId","keys","networks","networkInfo","contractName","fileName","toLowerCase","creatorTx","transactionHash","filter","func","contractsDeployed","c","join","description","meta","TransactionMessage","App","_this3","addMessage","addMessageContracts","setContractAbi","contractsAbi","_","setConnectionInfo","connectionInfo","network_id","network_name","network_url","pushTransactionMessage","messageData","handleWebSocketMessage","parse","initialize","Components_Debugger_Debugger","Components_ActionLogs_ActionLogs","build_default","onMessage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a13976d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ColoredDarkZippoLogo.7e4e7e9f.svg\";","import React from 'react';\nimport classNames from 'classnames';\n\nimport './style.scss';\n\nconst Icon = ({icon}) => (\n    <i className={classNames(\n        \"ZippoIcon\",\n        `icon-${icon}`\n    )}/>\n);\n\nexport default Icon;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport Moment from 'moment';\n\nimport \"./ActionLogs.scss\";\nimport Icon from \"../Icon/Icon\";\n\nclass Log extends Component {\n    getLogEntryClass = (log) => {\n        if (log.level === 'error') {\n            return 'Error';\n        }\n\n        return '';\n    };\n\n    render() {\n        const {log} = this.props;\n\n        return (\n            <div className={classNames(\n                \"LogEntry\",\n                this.getLogEntryClass(log),\n            )}>\n                <div className=\"BasicInfo\">\n                    <div className=\"LogLevel\">{log.level}</div>\n                    <div className=\"LogTimestamp\">{log.timestamp.format('YYYY-MM-DD hh:mm:ss')}</div>\n                </div>\n                <div className=\"LogDetails\">\n                    <div className=\"MainMessage\">\n                        <div>\n                            <span className=\"LogType\">[{log.type}]</span>\n                            <span>{log.data.message}</span>\n                        </div>\n                        <Icon icon=\"chevron-down\"/>\n                    </div>\n                    {/*<div className=\"DetailedMessage\">{log.data.details}</div>*/}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass ActionLogs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logsLoaded: false,\n            connected: false,\n            logs: [\n                {\n                    level: 'info',\n                    type: 'initial_message',\n                    timestamp: new Moment(\"2019-03-09T16:30:25\"),\n                    data: {\n                        message: 'Deployed contract Calculator.sol to 0x6B6220677b93E8fc9dC3ffE582E481B7A56c79a9',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'transaction',\n                    timestamp: new Moment(\"2019-03-09T16:31:17\"),\n                    data: {\n                        message: '',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'new_version',\n                    timestamp: new Moment(\"2019-03-09T16:31:49\"),\n                    data: {\n                        message: 'Deployed contract Calculator.sol to 0x4cb5442e13a7b269328f490a75d65aa4ca2883cb',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'transaction',\n                    timestamp: new Moment(\"2019-03-09T16:32:03\"),\n                    data: {\n                        message: '',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'error',\n                    type: 'compile_failed',\n                    timestamp: new Moment(\"2019-03-09T16:33:41\"),\n                    data: {\n                        message: 'Error trying to compile contract Calculator.sol',\n                        details: '',\n                    },\n                },\n            ],\n        };\n    }\n\n    render() {\n        const {logs, connection} = this.props;\n\n        return (\n            <div className=\"ActionLogs\">\n                <div className=\"LogsHeader\">\n                    {!connection && <div className=\"ConnectionLoader\">\n                        <Icon icon=\"spinner\"/>\n                        <span>Connecting...</span>\n                    </div>}\n                    {!!connection && <div className=\"ConnectionInformation\">\n                        Connected to RPC: <span className=\"Network\">{connection.name} (http://{connection.url})</span>\n                    </div>}\n                </div>\n                <div className=\"LogsContent\">\n                    <div className=\"LogsWrapper\">\n                        {logs.map(log => <Log log={log} key={log.timestamp}/>)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ActionLogs;\n","import React from 'react';\n\nimport './Loader.scss'\n\nconst Loader = () => (\n    <div className=\"Loader\">\n        <div/>\n        <div/>\n    </div>\n);\n\nexport default Loader;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport OutsideClickHandler from 'react-outside-click-handler'\n\nimport './Select.scss';\n\nclass Select extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    toggleDropdown = () => {\n        const {disabled} = this.props;\n        const {open} = this.state;\n\n        if (disabled) {\n            return;\n        }\n\n        this.setState({\n            open: !open,\n        });\n    };\n\n    closeDropdown = () => {\n        this.setState({\n            open: false,\n        });\n    };\n\n    handleSelect = (option) => {\n        const {field, disabled, onChange} = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        onChange(option.name, field);\n\n        this.closeDropdown();\n    };\n\n    render() {\n        const {options, disabled, value, label, placeholder} = this.props;\n        const {open} = this.state;\n\n        return (\n            <OutsideClickHandler onOutsideClick={this.closeDropdown}>\n                <div className={classNames(\n                    \"Select\",\n                    {\n                        \"Disabled\": disabled,\n                        \"Open\": open,\n                    }\n                )}>\n                    <div className=\"Label\" onClick={this.toggleDropdown}>{label}</div>\n                    <div className=\"CurrentSelection\" onClick={this.toggleDropdown}>\n                        {!!value && <span className=\"Value\">{value}</span>}\n                        {!value && <span className=\"Placeholder\">{placeholder || 'Select an option'}</span>}\n                    </div>\n                    <div className=\"SelectDropdown\">\n                        {!!options.length && options.map(option => <div className=\"DropdownOption\" key={option.name} onClick={() => this.handleSelect(option)}>\n                            {option.name}\n                        </div>)}\n                        {!options.length && <div className=\"DropdownEmpty\">\n                            <span>No options</span>\n                        </div>}\n                    </div>\n                </div>\n            </OutsideClickHandler>\n        );\n    }\n}\n\nSelect.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    value: PropTypes.string,\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Select;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.scss';\n\nconst Button = ({onClick, disabled, children, color, size}) => (\n    <button disabled={disabled} onClick={onClick} className={classNames(\n        \"Button\",\n        size,\n        color,\n    )}>\n        {children}\n    </button>\n);\n\nButton.defaultProps = {\n    color: 'invisible',\n    size: '',\n};\n\nexport default Button;\n","import Web3 from 'web3';\nimport {RPC_URI} from \"./Common/constants\";\n\nlet web3;\nlet web3Account = '0x25f5dc546ef27666c6e4ce75f470ab2b8c092a8f';\n// let web3AccountPrivKey = '0xe3eabffdf23cb34ea60612dd31ed79fcb2acb15833f3064c654d54a791a0e8e1';\n// let web3AccountPasswor   d = 'zippodev';\n\nclass EthereumClient {\n    static initialize() {\n        web3 = new Web3(RPC_URI);\n        // web3.eth.personal.newAccount(web3AccountPassword).then(account => {\n        //     web3Account = account;\n        //     console.log(account);\n        // });\n    }\n\n    static getAccounts() {\n        if (web3) {\n            console.log(web3.eth.accounts);\n        }\n    }\n\n    /**\n     *\n     * @param {Function} method\n     * @param {array} params\n     * @param {Function} callback\n     */\n    static sendTransaction(method, params, callback = () => {}) {\n        if (web3) {\n            const calledMethod = method(...params);\n            if (calledMethod.hasOwnProperty('send')) {\n                calledMethod\n                    .send({\n                        from: web3Account,\n                    })\n                    .on('transactionHash', (hash) => {\n                        // console.log('transactionHash', hash);\n                    })\n                    .on('confirmation', (confirmationNumber, receipt) => {\n                        // console.log('confirmation', confirmationNumber, receipt);\n                    })\n                    .on('receipt', (receipt) => {\n                        callback(false, receipt);\n                        // console.log('receipt', receipt);\n                    })\n                    .on('error', error => {\n                        callback(error);\n                    });\n            } else if (calledMethod.hasOwnProperty('call')) {\n                calledMethod\n                    .call({\n                        from: web3Account,\n                    }, callback)\n                    .then((result) => {\n                        // console.log('call result', result);\n                    });\n            }\n\n            // web3.eth.personal.unlockAccount(web3Account, web3AccountPassword, 600)\n            //     .then(() => {\n            //         method(...params).send({\n            //             from: web3Account,\n            //         }, callback);\n            //     });\n        }\n    }\n\n    static getContract(contractAbi, address) {\n        if (!web3) {\n            return null;\n        }\n\n        return web3.eth.Contract(contractAbi, address);\n    }\n}\n\nexport default EthereumClient;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './Input.scss';\n\nclass Input extends Component {\n    handleInputChange = (event) => {\n        const {disabled, onChange, field} = this.props;\n\n        const newValue = event.target.value;\n\n        if (onChange && !disabled) {\n            onChange(newValue, field, event);\n        }\n    };\n\n    render() {\n        const {placeholder, field, value, label, disabled, className} = this.props;\n\n        return (\n            <div className={classNames(\n                \"InputWrapper\",\n                className,\n                {\"disabled\": disabled,}\n            )}>\n                {!!label && <label htmlFor={`input-${field}`} className=\"InputLabel\">{label}</label>}\n                <input placeholder={placeholder} id={`input-${field}`} disabled={disabled} onChange={this.handleInputChange} type=\"text\" className=\"Input\" value={value || ''}/>\n            </div>\n        );\n    }\n}\n\nInput.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Input;\n","import React, {Component} from 'react';\n\nimport './Header.scss';\n\nimport ZippoLogo from '../../Images/ColoredDarkZippoLogo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"MainWrapper\">\n                    <div className=\"LogoWrapper\">\n                        <img src={ZippoLogo} height={44} alt=\"\"/>\n                    </div>\n                </div>\n                <div className=\"ActionsWrapper\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","export const WS_URL = process.env.REACT_APP_NODE_WS;\nexport const RPC_URI = process.env.REACT_APP_RPC_WS;\n","import React, {Component} from 'react';\n\nimport './Debugger.scss';\nimport Loader from \"../Loader/Loader\";\nimport Select from \"../Select/Select\";\nimport Button from \"../Button/Button\";\nimport Input from \"../Input/Input\";\nimport Header from \"../Header/Header\";\nimport EthereumClient from \"../../EthereumClient\";\n\nclass Debugger extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            initiallyLoaded: false,\n            contracts: [],\n            methods: {},\n            selectedContract: null,\n            selectedContractMethods: [],\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.initiallyLoaded && props.contracts && !!props.contracts.length) {\n            return {\n                ...state,\n                initiallyLoaded: true,\n                contracts: props.contracts\n            };\n        }\n\n        return null;\n    }\n\n    handleInputChange = (value, field) => {\n        this.setState({\n            [field]: value,\n        });\n    };\n\n    handleMethodInputChange = (value, field) => {\n        const {methodInputs} = this.state;\n\n        this.setState({\n            methodInputs: {\n                ...methodInputs,\n                [field]: value,\n            },\n        });\n    };\n\n    isFormValid = () => {\n        const {selectedContract, selectedMethod, methodInputs, selectedMethodInputs, sendingTransaction} = this.state;\n\n        if (!selectedContract || !selectedMethod || sendingTransaction) {\n            return false;\n        }\n\n        let valid = true;\n\n        selectedMethodInputs.forEach(methodInput => {\n            if (!methodInputs[methodInput.name]) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    };\n\n    handleSelectContract = (value, field) => {\n        const {contracts} = this.state;\n\n        const selectedContract = contracts.find(contract => contract.name === value);\n\n        this.setState({\n            selectedContractMethods: selectedContract.methods,\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    handleSelectContractMethod = (value, field) => {\n        const {selectedContractMethods} = this.state;\n\n        const selectedMethod = selectedContractMethods.find(method => method.name === value);\n\n        this.setState({\n            selectedMethodInputs: selectedMethod.inputs,\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    sendTransaction = () => {\n        const {contracts, selectedContract, methodInputs, selectedMethod} = this.state;\n        const {abi, onTransaction} = this.props;\n\n        this.setState({\n            sendingTransaction: true,\n            transactionResult: null,\n        });\n\n        const txContract = contracts.find(contract => contract.name === selectedContract);\n\n        const transactionMethod = EthereumClient.getContract(\n            abi[txContract.address], txContract.address\n        ).methods[selectedMethod.replace('()', '')];\n\n\n        EthereumClient.sendTransaction(transactionMethod, Object.values(methodInputs), (error, tx) => {\n            console.log(error, tx);\n\n            if (onTransaction) {\n                if (!error) {\n                    onTransaction({\n                        level: 'info',\n                        method: selectedMethod,\n                        contract: selectedContract,\n                        inputs: methodInputs,\n                        result: tx,\n                    });\n                }\n            }\n\n            setTimeout(() => {\n                this.setState({\n                    sendingTransaction: false,\n                    transactionResult: {\n                        message: 'something'\n                    },\n                });\n            }, 1000);\n        });\n    };\n\n    render() {\n        const {\n            initiallyLoaded,\n            contracts,\n            selectedContract,\n            selectedContractMethods,\n            selectedMethod,\n            selectedMethodInputs,\n            methodInputs,\n            sendingTransaction,\n            transactionResult\n        } = this.state;\n\n        return (\n            <div className=\"Debugger\">\n                <Header/>\n                {!initiallyLoaded && <div className=\"DebuggerLoader\">\n                    <Loader/>\n                </div>}\n                {initiallyLoaded && <div className=\"DebuggerForm\">\n                    <Select value={selectedContract}\n                            options={contracts}\n                            field=\"selectedContract\"\n                            onChange={this.handleSelectContract}\n                            label=\"Contract\"\n                            disabled={sendingTransaction}\n                            placeholder=\"Select contract\"/>\n                    <Select value={selectedMethod}\n                            options={selectedContractMethods}\n                            field=\"selectedMethod\"\n                            onChange={this.handleSelectContractMethod}\n                            label=\"Method\" placeholder=\"Select contract method\"\n                            disabled={!selectedContract || sendingTransaction}/>\n                    {(!!selectedMethod && !!selectedMethodInputs.length) && <div className=\"MethodInputsWrapper\">\n                        <div className=\"InputsHeading\">Method Inputs</div>\n                        {selectedMethodInputs.map(methodInput => <div key={methodInput.name} className=\"MethodInputItem\">\n                            <div className=\"InputName\">{methodInput.name}</div>\n                            <div className=\"InputInput\">\n                                <Input value={methodInputs[methodInput.name]}\n                                       field={methodInput.name}\n                                       onChange={this.handleMethodInputChange}\n                                       placeholder={methodInput.type}/>\n                            </div>\n                        </div>)}\n                    </div>}\n                    <Button size=\"large\" disabled={!this.isFormValid()} color=\"orange\" onClick={this.sendTransaction}>\n                        <span>Send Transaction</span>\n                    </Button>\n                    {(sendingTransaction || !!transactionResult) && <div className=\"TransactionResultWrapper\">\n                        {sendingTransaction && <div className=\"ResultLoader\">\n                            <Loader/>\n                        </div>}\n                        {!sendingTransaction && <div className=\"ResultContent\">\n                            <pre className=\"Result\">{JSON.stringify(transactionResult)}</pre>\n                        </div>}\n                    </div>}\n                </div>}\n            </div>\n        );\n    }\n}\n\nexport default Debugger;\n","import React, {Component} from 'react';\nimport Websocket from 'react-websocket';\nimport Moment from 'moment';\nimport _ from 'lodash';\n\nimport './App.scss';\nimport ActionLogs from \"./Components/ActionLogs/ActionLogs\";\nimport Debugger from \"./Components/Debugger/Debugger\";\nimport {WS_URL} from \"./Common/constants\";\nimport EthereumClient from \"./EthereumClient\";\n\nfunction extractMethodsFromAbi(abi) {\n    return abi.filter(data => data.type === 'function').map(func => {\n        return {\n            ...func,\n            name: `${func.name}()`\n        };\n    });\n}\n\nclass Message {\n    constructor(data) {\n        this.level = data.level || 'info';\n        this.type = data.type || 'unknown';\n        this.data = {};\n        this.timestamp = data.timestamp || new Moment();\n    }\n}\n\nclass InitialMessage extends Message {\n    constructor(message) {\n        super(message);\n        const contracts = Object.values(message.data).map(contract => {\n            const networkId = Object.keys(contract.networks)[0];\n            const networkInfo = Object.values(contract.networks)[0];\n\n            return {\n                contractName: contract.contractName,\n                fileName: `${contract.contractName}.sol`,\n                name: `${contract.contractName}.sol`,\n                networkId,\n                address: networkInfo.address.toLowerCase(),\n                creatorTx: networkInfo.transactionHash,\n                methods: extractMethodsFromAbi(contract.abi),\n            }\n        });\n\n        const contractsDeployed = `[${contracts.map(c => c.name).join(', ')}]`;\n\n        this.data = {\n            message: `Initial deployment of ${contractsDeployed}`,\n            description: '',\n            contracts,\n        };\n\n        this.meta = {\n            contracts,\n        };\n    }\n}\n\nclass TransactionMessage extends Message {\n    constructor(message) {\n        super({\n            level: message.level,\n            type: 'contract_transaction',\n        });\n\n        this.data = {\n            message: `Called ${message.method} in ${message.contract}`,\n            description: '',\n        };\n\n        this.meta = {\n            result: message.result,\n            inputs: message.methodInputs,\n        };\n    }\n\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logs: [],\n            contracts: [],\n            contractsAbi: {},\n            connectionInfo: null,\n        };\n\n        EthereumClient.initialize();\n    }\n\n    addMessage = message => {\n        const {logs} = this.state;\n\n        this.setState({\n            logs: [\n                ...logs,\n                message,\n            ]\n        })\n    };\n\n    addMessageContracts = message => {\n        const {contracts} = this.state;\n\n        this.setState({\n            contracts: [\n                ...contracts,\n                ...message.data.contracts,\n            ]\n        })\n    };\n\n    setContractAbi = abi => {\n        const {contractsAbi} = this.state;\n\n        const contractAbi = {};\n        _.forEach(abi, (contract, address) => {\n            contractAbi[address.toLowerCase()] = contract.abi;\n        });\n\n        this.setState({\n            contractsAbi: {\n                ...contractsAbi,\n                ...contractAbi,\n            },\n        });\n    };\n\n    setConnectionInfo = message => {\n        this.setState({\n            connectionInfo: {\n                id: message.network_id,\n                name: message.network_name,\n                url: message.network_url,\n            },\n        });\n    };\n\n    pushTransactionMessage = (messageData) => {\n        const message = new TransactionMessage(messageData);\n\n        this.addMessage(message);\n    };\n\n    handleWebSocketMessage = (data) => {\n        const messageData = JSON.parse(data);\n\n        switch (messageData.type) {\n            case 'initial_message':\n                const message = new InitialMessage(messageData);\n                this.addMessage(message);\n                this.addMessageContracts(message);\n                this.setContractAbi(messageData.data);\n                this.setConnectionInfo(messageData);\n                return;\n            default:\n                console.log('unparsed message', messageData);\n                return;\n        }\n    };\n\n    render() {\n        const {contracts, logs, contractsAbi, connectionInfo} = this.state;\n\n        return (\n            <div className=\"App\">\n                <Debugger contracts={contracts} abi={contractsAbi} onTransaction={this.pushTransactionMessage}/>\n                <ActionLogs logs={logs} connection={connectionInfo}/>\n                <Websocket url={WS_URL}\n                           onMessage={this.handleWebSocketMessage}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('AppRoot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}