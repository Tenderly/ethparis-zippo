{"version":3,"sources":["Images/ColoredDarkZippoLogo.svg","Components/Icon/Icon.js","Components/ActionLogs/ActionLogs.js","Components/Loader/Loader.js","Components/Select/Select.js","Components/Button/Button.js","EthereumClient.js","Components/Input/Input.js","Components/Header/Header.js","Common/constants.js","Components/Debugger/Debugger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Icon","_ref","icon","react_default","a","createElement","className","classNames","concat","ActionLogs","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLogEntryClass","log","level","state","logsLoaded","connected","logs","type","timestamp","Moment","data","message","details","_this2","Components_Icon_Icon","map","key","format","Component","Loader","Select","toggleDropdown","disabled","open","setState","closeDropdown","handleSelect","option","_this$props","field","onChange","name","_this$props2","options","value","label","placeholder","react_outside_click_handler_default","onOutsideClick","Disabled","Open","onClick","length","Button","children","color","size","defaultProps","web3","Input","handleInputChange","event","newValue","target","htmlFor","id","Header","src","ZippoLogo","height","alt","web3Account","EthereumClient","Web3","process","console","eth","accounts","method","params","callback","arguments","undefined","calledMethod","apply","toConsumableArray","hasOwnProperty","send","from","on","hash","confirmationNumber","receipt","error","then","result","contractAbi","address","Contract","Debugger","defineProperty","handleMethodInputChange","methodInputs","objectSpread","isFormValid","_this$state","selectedContract","selectedMethod","selectedMethodInputs","sendingTransaction","valid","forEach","methodInput","handleSelectContract","contracts","find","contract","selectedContractMethods","methods","transactionResult","handleSelectContractMethod","inputs","sendTransaction","_this$state2","abi","txContract","transactionMethod","getContract","replace","values","tx","setTimeout","initiallyLoaded","_this$state3","Components_Header_Header","Components_Loader_Loader","Components_Select_Select","Components_Input_Input","Components_Button_Button","JSON","stringify","InitialMessage","networkId","keys","networks","networkInfo","contractName","fileName","toLowerCase","creatorTx","transactionHash","filter","func","contractsDeployed","c","join","description","Message","App","addMessage","addMessageContracts","setContractAbi","contractsAbi","_","handleWebSocketMessage","messageData","parse","initialize","Components_Debugger_Debugger","Components_ActionLogs_ActionLogs","build_default","url","onMessage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,imBCYzBC,iBAPF,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACTC,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IACV,YADoB,QAAAC,OAEZN,QCwGDO,cAxGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuDVQ,iBAAmB,SAACC,GAChB,MAAkB,UAAdA,EAAIC,MACG,QAGJ,IA1DPT,EAAKU,MAAQ,CACTC,YAAY,EACZC,WAAW,EACXC,KAAM,CACF,CACIJ,MAAO,OACPK,KAAM,kBACNC,UAAW,IAAIC,IAAO,uBACtBC,KAAM,CACFC,QAAS,iFACTC,QAAS,KAGjB,CACIV,MAAO,OACPK,KAAM,cACNC,UAAW,IAAIC,IAAO,uBACtBC,KAAM,CACFC,QAAS,GACTC,QAAS,KAGjB,CACIV,MAAO,OACPK,KAAM,cACNC,UAAW,IAAIC,IAAO,uBACtBC,KAAM,CACFC,QAAS,iFACTC,QAAS,KAGjB,CACIV,MAAO,OACPK,KAAM,cACNC,UAAW,IAAIC,IAAO,uBACtBC,KAAM,CACFC,QAAS,GACTC,QAAS,KAGjB,CACIV,MAAO,QACPK,KAAM,iBACNC,UAAW,IAAIC,IAAO,uBACtBC,KAAM,CACFC,QAAS,kDACTC,QAAS,OAjDVnB,wEAgEV,IAAAoB,EAAAjB,KACES,EAAaT,KAAKO,MAAlBE,UACAC,EAAQV,KAAKJ,MAAbc,KAEP,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACTiB,GAAapB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAC1BH,EAAAC,EAAAC,cAAC2B,EAAD,CAAM9B,KAAK,YACXC,EAAAC,EAAAC,cAAA,8BAEHkB,GAAapB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,qBACQH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,qCAG1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVkB,EAAKS,IAAI,SAAAd,GAAG,OAAIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAC7B,WACAwB,EAAKb,iBAAiBC,IACvBe,IAAKf,EAAIO,WACRvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYa,EAAIC,OAC/BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBa,EAAIO,UAAUS,OAAO,yBAExDhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,IAA4Ba,EAAIM,KAAhC,KACAtB,EAAAC,EAAAC,cAAA,YAAOc,EAAIS,KAAKC,UAEpB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBa,EAAIS,KAAKE,uBA/FlDM,qBCIVC,iBAPA,kBACXlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,iCCiFOiC,sBAhFX,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACf3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAOV6B,eAAiB,WAAM,IACZC,EAAY7B,EAAKD,MAAjB8B,SACAC,EAAQ9B,EAAKU,MAAboB,KAEHD,GAIJ7B,EAAK+B,SAAS,CACVD,MAAOA,KAjBI9B,EAqBnBgC,cAAgB,WACZhC,EAAK+B,SAAS,CACVD,MAAM,KAvBK9B,EA2BnBiC,aAAe,SAACC,GAAW,IAAAC,EACanC,EAAKD,MAAlCqC,EADgBD,EAChBC,MAAOP,EADSM,EACTN,SAAUQ,EADDF,EACCE,SAEpBR,IAIJQ,EAASH,EAAOI,KAAMF,GAEtBpC,EAAKgC,kBAjCLhC,EAAKU,MAAQ,CACToB,MAAM,GAJK9B,wEAuCV,IAAAoB,EAAAjB,KAAAoC,EACkDpC,KAAKJ,MAArDyC,EADFD,EACEC,QAASX,EADXU,EACWV,SAAUY,EADrBF,EACqBE,MAAOC,EAD5BH,EAC4BG,MAAOC,EADnCJ,EACmCI,YACjCb,EAAQ3B,KAAKO,MAAboB,KAEP,OACItC,EAAAC,EAAAC,cAACkD,EAAAnD,EAAD,CAAqBoD,eAAgB1C,KAAK6B,eACtCxC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IACZ,SACA,CACIkD,SAAYjB,EACZkB,KAAQjB,KAGZtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQqD,QAAS7C,KAAKyB,gBAAiBc,GACtDlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBqD,QAAS7C,KAAKyB,kBACzCa,GAASjD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAS8C,IACnCA,GAASjD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAegD,GAAe,qBAE7DnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACR6C,EAAQS,QAAUT,EAAQlB,IAAI,SAAAY,GAAM,OAAI1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB4B,IAAKW,EAAOI,KAAMU,QAAS,kBAAM5B,EAAKa,aAAaC,KACzHA,EAAOI,SAEVE,EAAQS,QAAUzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAC/BH,EAAAC,EAAAC,cAAA,qCA/DP+B,cCFfyB,UAAS,SAAA5D,GAAA,IAAE0D,EAAF1D,EAAE0D,QAASnB,EAAXvC,EAAWuC,SAAUsB,EAArB7D,EAAqB6D,SAAUC,EAA/B9D,EAA+B8D,MAAOC,EAAtC/D,EAAsC+D,KAAtC,OACX7D,EAAAC,EAAAC,cAAA,UAAQmC,SAAUA,EAAUmB,QAASA,EAASrD,UAAWC,IACrD,SACAyD,EACAD,IAECD,KAITD,EAAOI,aAAe,CAClBF,MAAO,YACPC,KAAM,IAGKH,ICjBXK,EDiBWL,IEqBAM,qNAlCXC,kBAAoB,SAACC,GAAU,IAAAvB,EACSnC,EAAKD,MAAlC8B,EADoBM,EACpBN,SAAUQ,EADUF,EACVE,SAAUD,EADAD,EACAC,MAErBuB,EAAWD,EAAME,OAAOnB,MAE1BJ,IAAaR,GACbQ,EAASsB,EAAUvB,EAAOsB,4EAIzB,IAAAnB,EAC2DpC,KAAKJ,MAA9D4C,EADFJ,EACEI,YAAaP,EADfG,EACeH,MAAOK,EADtBF,EACsBE,MAAOC,EAD7BH,EAC6BG,MAAOb,EADpCU,EACoCV,SAAUlC,EAD9C4C,EAC8C5C,UAEnD,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IACZ,eACAD,EACA,CAACkC,SAAYA,OAEVa,GAASlD,EAAAC,EAAAC,cAAA,SAAOmE,QAAO,SAAAhE,OAAWuC,GAASzC,UAAU,cAAc+C,GACtElD,EAAAC,EAAAC,cAAA,SAAOiD,YAAaA,EAAamB,GAAE,SAAAjE,OAAWuC,GAASP,SAAUA,EAAUQ,SAAUlC,KAAKsD,kBAAmB3C,KAAK,OAAOnB,UAAU,QAAQ8C,MAAOA,GAAS,aArBvJhB,yCCgBLsC,mLAdP,OACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKsE,IAAKC,IAAWC,OAAQ,GAAIC,IAAI,OAG7C3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BATV8B,+BFFjB2C,EAAc,6CAuEHC,4GAjEPd,EAAO,IAAIe,IGTIC,mEHiBXhB,GACAiB,QAAQhE,IAAI+C,EAAKkB,IAAIC,kDAUNC,EAAQC,GAA6B,IAArBC,EAAqBC,UAAA7B,OAAA,QAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAV,aAC9C,GAAIvB,EAAM,CACN,IAAMyB,EAAeL,EAAMM,WAAN,EAAAhF,OAAAiF,EAAA,EAAAjF,CAAU2E,IAC3BI,EAAaG,eAAe,QAC5BH,EACKI,KAAK,CACFC,KAAMjB,GACPS,GACFS,GAAG,kBAAmB,SAACC,GACpBf,QAAQhE,IAAI,kBAAmB+E,KAElCD,GAAG,eAAgB,SAACE,EAAoBC,GACrCjB,QAAQhE,IAAI,eAAgBgF,EAAoBC,KAEnDH,GAAG,UAAW,SAACG,GACZjB,QAAQhE,IAAI,UAAWiF,KAE1BH,GAAG,QAASd,QAAQkB,OAClBV,EAAaG,eAAe,SACnCH,EACK1E,KAAK,CACF+E,KAAMjB,GACPS,GACFc,KAAK,SAACC,GACHpB,QAAQhE,IAAI,cAAeoF,0CAa5BC,EAAaC,GAC5B,OAAKvC,EAIEA,EAAKkB,IAAIsB,SAASF,EAAaC,GAH3B,cIoIJE,cA7LX,SAAAA,EAAYjG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6F,IACfhG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+F,GAAA1F,KAAAH,KAAMJ,KA4BV0D,kBAAoB,SAAChB,EAAOL,GACxBpC,EAAK+B,SAAL9B,OAAAgG,EAAA,EAAAhG,CAAA,GACKmC,EAAQK,KA/BEzC,EAmCnBkG,wBAA0B,SAACzD,EAAOL,GAAU,IACjC+D,EAAgBnG,EAAKU,MAArByF,aAEPnG,EAAK+B,SAAS,CACVoE,aAAalG,OAAAmG,EAAA,EAAAnG,CAAA,GACNkG,EADKlG,OAAAgG,EAAA,EAAAhG,CAAA,GAEPmC,EAAQK,OAzCFzC,EA8CnBqG,YAAc,WAAM,IAAAC,EACmFtG,EAAKU,MAAjG6F,EADSD,EACTC,iBAAkBC,EADTF,EACSE,eAAgBL,EADzBG,EACyBH,aAAcM,EADvCH,EACuCG,qBAAsBC,EAD7DJ,EAC6DI,mBAE7E,IAAKH,IAAqBC,GAAkBE,EACxC,OAAO,EAGX,IAAIC,GAAQ,EAQZ,OANAF,EAAqBG,QAAQ,SAAAC,GACpBV,EAAaU,EAAYvE,QAC1BqE,GAAQ,KAITA,GA7DQ3G,EAgEnB8G,qBAAuB,SAACrE,EAAOL,GAAU,IAG/BmE,EAFcvG,EAAKU,MAAlBqG,UAE4BC,KAAK,SAAAC,GAAQ,OAAIA,EAAS3E,OAASG,IAEtEzC,EAAK+B,SAAS,CACVmF,wBAAyBX,EAAiBY,QAC1CX,eAAgB,KAChBC,qBAAsB,GACtBN,aAAc,GACdO,oBAAoB,EACpBU,kBAAmB,OAGvBpH,EAAKyD,kBAAkBhB,EAAOL,IA9EfpC,EAiFnBqH,2BAA6B,SAAC5E,EAAOL,GAAU,IAGrCoE,EAF4BxG,EAAKU,MAAhCwG,wBAEwCF,KAAK,SAAArC,GAAM,OAAIA,EAAOrC,OAASG,IAE9EzC,EAAK+B,SAAS,CACV0E,qBAAsBD,EAAec,OACrCnB,aAAc,GACdO,oBAAoB,EACpBU,kBAAmB,OAGvBpH,EAAKyD,kBAAkBhB,EAAOL,IA7FfpC,EAgGnBuH,gBAAkB,WAAM,IAAAC,EACgDxH,EAAKU,MAAlEqG,EADaS,EACbT,UAAWR,EADEiB,EACFjB,iBAAkBJ,EADhBqB,EACgBrB,aAAcK,EAD9BgB,EAC8BhB,eAC3CiB,EAAOzH,EAAKD,MAAZ0H,IAEPzH,EAAK+B,SAAS,CACV2E,oBAAoB,EACpBU,kBAAmB,OAGvB,IAAMM,EAAaX,EAAUC,KAAK,SAAAC,GAAQ,OAAIA,EAAS3E,OAASiE,IAE1DoB,EAAoBtD,EAAeuD,YACrCH,EAAIC,EAAW5B,SAAU4B,EAAW5B,SACtCqB,QAAQX,EAAeqB,QAAQ,KAAM,KAEvCrD,QAAQhE,IAAIiH,EAAKC,EAAW5B,QAAS6B,EAAmBnB,GAExDnC,EAAekD,gBAAgBI,EAAmB1H,OAAO6H,OAAO3B,GAAe,SAACT,EAAOqC,GACnFvD,QAAQhE,IAAIkF,EAAOqC,KAGvBC,WAAW,WACPhI,EAAK+B,SAAS,CACV2E,oBAAoB,EACpBU,kBAAmB,CACflG,QAAS,gBAGlB,MAzHHlB,EAAKU,MAAQ,CACTuH,iBAAiB,EACjBlB,UAAW,GACXI,QAAS,GACTZ,iBAAkB,KAClBW,wBAAyB,GACzBV,eAAgB,KAChBC,qBAAsB,GACtBN,aAAc,GACdO,oBAAoB,EACpBU,kBAAmB,MAbRpH,wEA+HV,IAAAoB,EAAAjB,KAAA+H,EAWD/H,KAAKO,MATLuH,EAFCC,EAEDD,gBACAlB,EAHCmB,EAGDnB,UACAR,EAJC2B,EAID3B,iBACAW,EALCgB,EAKDhB,wBACAV,EANC0B,EAMD1B,eACAC,EAPCyB,EAODzB,qBACAN,EARC+B,EAQD/B,aACAO,EATCwB,EASDxB,mBACAU,EAVCc,EAUDd,kBAGJ,OACI5H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACyI,EAAD,OACEF,GAAmBzI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAChCH,EAAAC,EAAAC,cAAC0I,EAAD,OAEHH,GAAmBzI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAC/BH,EAAAC,EAAAC,cAAC2I,EAAD,CAAQ5F,MAAO8D,EACP/D,QAASuE,EACT3E,MAAM,mBACNC,SAAUlC,KAAK2G,qBACfpE,MAAM,WACNb,SAAU6E,EACV/D,YAAY,oBACpBnD,EAAAC,EAAAC,cAAC2I,EAAD,CAAQ5F,MAAO+D,EACPhE,QAAS0E,EACT9E,MAAM,iBACNC,SAAUlC,KAAKkH,2BACf3E,MAAM,SAASC,YAAY,yBAC3Bd,UAAW0E,GAAoBG,MACnCF,KAAoBC,EAAqBxD,QAAWzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACnEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,iBACC8G,EAAqBnF,IAAI,SAAAuF,GAAW,OAAIrH,EAAAC,EAAAC,cAAA,OAAK6B,IAAKsF,EAAYvE,KAAM3C,UAAU,mBAC3EH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAakH,EAAYvE,MACxC9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC4I,EAAD,CAAO7F,MAAO0D,EAAaU,EAAYvE,MAChCF,MAAOyE,EAAYvE,KACnBD,SAAUjB,EAAK8E,wBACfvD,YAAakE,EAAY/F,YAI5CtB,EAAAC,EAAAC,cAAC6I,EAAD,CAAQlF,KAAK,QAAQxB,UAAW1B,KAAKkG,cAAejD,MAAM,SAASJ,QAAS7C,KAAKoH,iBAC7E/H,EAAAC,EAAAC,cAAA,kCAEFgH,KAAwBU,IAAsB5H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAC1D+G,GAAsBlH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAClCH,EAAAC,EAAAC,cAAC0I,EAAD,QAEF1B,GAAsBlH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU6I,KAAKC,UAAUrB,2DAnKhCrH,EAAOW,GACnC,OAAKA,EAAMuH,iBAAmBlI,EAAMgH,WAAehH,EAAMgH,UAAU9D,OACxDhD,OAAAmG,EAAA,EAAAnG,CAAA,GACAS,EADP,CAEIuH,iBAAiB,EACjBlB,UAAWhH,EAAMgH,YAIlB,YA3BQtF,iBCmBjBiH,cACF,SAAAA,EAAYxH,GAAS,IAAAlB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuI,GACjB1I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyI,GAAApI,KAAAH,KAAMe,IACN,IAAM6F,EAAY9G,OAAO6H,OAAO5G,EAAQD,MAAMK,IAAI,SAAA2F,GAC9C,IAtBmBQ,EAsBbkB,EAAY1I,OAAO2I,KAAK3B,EAAS4B,UAAU,GAC3CC,EAAc7I,OAAO6H,OAAOb,EAAS4B,UAAU,GAErD,MAAO,CACHE,aAAc9B,EAAS8B,aACvBC,SAAQ,GAAAnJ,OAAKoH,EAAS8B,aAAd,QACRzG,KAAI,GAAAzC,OAAKoH,EAAS8B,aAAd,QACJJ,YACA7C,QAASgD,EAAYhD,QAAQmD,cAC7BC,UAAWJ,EAAYK,gBACvBhC,SAhCeM,EAgCgBR,EAASQ,IA/B7CA,EAAI2B,OAAO,SAAAnI,GAAI,MAAkB,aAAdA,EAAKH,OAAqBQ,IAAI,SAAA+H,GACpD,OAAOpJ,OAAAmG,EAAA,EAAAnG,CAAA,GACAoJ,EADP,CAEI/G,KAAI,GAAAzC,OAAKwJ,EAAK/G,KAAV,cAgCFgH,EAAiB,IAAAzJ,OAAOkH,EAAUzF,IAAI,SAAAiI,GAAC,OAAIA,EAAEjH,OAAMkH,KAAK,MAAvC,KAjBN,OAmBjBxJ,EAAKiB,KAAO,CACRC,QAAO,yBAAArB,OAA2ByJ,GAClCG,YAAa,GACb1C,aAtBa/G,6BATrB,SAAA0J,EAAYzI,GAAOhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAuJ,GACfvJ,KAAKM,MAAQQ,EAAKR,OAAS,OAC3BN,KAAKW,KAAOG,EAAKH,MAAQ,UACzBX,KAAKc,KAAO,GACZd,KAAKY,UAAYE,EAAKF,WAAa,IAAIC,MAyHhC2I,cAhFX,SAAAA,EAAY5J,GAAO,IAAAqB,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAwJ,IACfvI,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0J,GAAArJ,KAAAH,KAAMJ,KAWV6J,WAAa,SAAA1I,GAAW,IACbL,EAAQO,EAAKV,MAAbG,KAEPO,EAAKW,SAAS,CACVlB,KAAI,GAAAhB,OAAAI,OAAAiF,EAAA,EAAAjF,CACGY,GADH,CAEAK,OAlBOE,EAuBnByI,oBAAsB,SAAA3I,GAAW,IACtB6F,EAAa3F,EAAKV,MAAlBqG,UAEP3F,EAAKW,SAAS,CACVgF,UAAS,GAAAlH,OAAAI,OAAAiF,EAAA,EAAAjF,CACF8G,GADE9G,OAAAiF,EAAA,EAAAjF,CAEFiB,EAAQD,KAAK8F,eA7BT3F,EAkCnB0I,eAAiB,SAAArC,GAAO,IACbsC,EAAgB3I,EAAKV,MAArBqJ,aAEDlE,EAAc,GACpBmE,IAAEpD,QAAQa,EAAK,SAACR,EAAUnB,GACtBD,EAAYC,EAAQmD,eAAiBhC,EAASQ,MAGlDrG,EAAKW,SAAS,CACVgI,aAAa9J,OAAAmG,EAAA,EAAAnG,CAAA,GACN8J,EACAlE,MA7CIzE,EAkDnB6I,uBAAyB,SAAChJ,GACtB,IAAMiJ,EAAc1B,KAAK2B,MAAMlJ,GAE/B,OAAQiJ,EAAYpJ,MAChB,IAAK,kBACD,IAAMI,EAAU,IAAIwH,EAAewB,GAInC,OAHA9I,EAAKwI,WAAW1I,GAChBE,EAAKyI,oBAAoB3I,QACzBE,EAAK0I,eAAeI,EAAYjJ,MAEpC,QAEI,YADAuD,QAAQhE,IAAI,mBAAoB0J,KA1DxC9I,EAAKV,MAAQ,CACTG,KAAM,GACNkG,UAAW,GACXgD,aAAc,IAGlB1F,EAAe+F,aATAhJ,wEAkEV,IAAAkF,EACmCnG,KAAKO,MAAtCqG,EADFT,EACES,UAAWlG,EADbyF,EACazF,KAAMkJ,EADnBzD,EACmByD,aAExB,OACIvK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC2K,EAAD,CAAUtD,UAAWA,EAAWU,IAAKsC,IACrCvK,EAAAC,EAAAC,cAAC4K,EAAD,CAAYzJ,KAAMA,IAClBrB,EAAAC,EAAAC,cAAC6K,EAAA9K,EAAD,CAAW+K,IF3ILjG,uBE4IKkG,UAAWtK,KAAK8J,iCA3EzBxI,aCrDEiJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxL,EAAAC,EAAAC,cAACuL,EAAD,MAASC,SAASC,eAAe,YD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3F,KAAK,SAAA4F,GACjCA,EAAaC","file":"static/js/main.5761ecef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ColoredDarkZippoLogo.7e4e7e9f.svg\";","import React from 'react';\nimport classNames from 'classnames';\n\nimport './style.scss';\n\nconst Icon = ({icon}) => (\n    <i className={classNames(\n        \"ZippoIcon\",\n        `icon-${icon}`\n    )}/>\n);\n\nexport default Icon;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport Moment from 'moment';\n\nimport \"./ActionLogs.scss\";\nimport Icon from \"../Icon/Icon\";\n\nclass ActionLogs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logsLoaded: false,\n            connected: false,\n            logs: [\n                {\n                    level: 'info',\n                    type: 'initial_message',\n                    timestamp: new Moment(\"2019-03-09T16:30:25\"),\n                    data: {\n                        message: 'Deployed contract Calculator.sol to 0x6B6220677b93E8fc9dC3ffE582E481B7A56c79a9',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'transaction',\n                    timestamp: new Moment(\"2019-03-09T16:31:17\"),\n                    data: {\n                        message: '',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'new_version',\n                    timestamp: new Moment(\"2019-03-09T16:31:49\"),\n                    data: {\n                        message: 'Deployed contract Calculator.sol to 0x4cb5442e13a7b269328f490a75d65aa4ca2883cb',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'info',\n                    type: 'transaction',\n                    timestamp: new Moment(\"2019-03-09T16:32:03\"),\n                    data: {\n                        message: '',\n                        details: '',\n                    },\n                },\n                {\n                    level: 'error',\n                    type: 'compile_failed',\n                    timestamp: new Moment(\"2019-03-09T16:33:41\"),\n                    data: {\n                        message: 'Error trying to compile contract Calculator.sol',\n                        details: '',\n                    },\n                },\n            ],\n        };\n    }\n\n    getLogEntryClass = (log) => {\n        if (log.level === 'error') {\n            return 'Error';\n        }\n\n        return '';\n    };\n\n    render() {\n        const {connected} = this.state;\n        const {logs} = this.props;\n\n        return (\n            <div className=\"ActionLogs\">\n                <div className=\"LogsHeader\">\n                    {!connected && <div className=\"ConnectionLoader\">\n                        <Icon icon=\"spinner\"/>\n                        <span>Connecting...</span>\n                    </div>}\n                    {connected && <div className=\"ConnectionInformation\">\n                        Connected to RPC: <span className=\"Network\">Ganache (http://localhost:8545)</span>\n                    </div>}\n                </div>\n                <div className=\"LogsContent\">\n                    <div className=\"LogsWrapper\">\n                        {logs.map(log => <div className={classNames(\n                            \"LogEntry\",\n                            this.getLogEntryClass(log),\n                        )} key={log.timestamp}>\n                            <div className=\"BasicInfo\">\n                                <div className=\"LogLevel\">{log.level}</div>\n                                <div className=\"LogTimestamp\">{log.timestamp.format('YYYY-MM-DD hh:mm:ss')}</div>\n                            </div>\n                            <div className=\"LogDetails\">\n                                <div className=\"MainMessage\">\n                                    <span className=\"LogType\">[{log.type}]</span>\n                                    <span>{log.data.message}</span>\n                                </div>\n                                <div className=\"DetailedMessage\">{log.data.details}</div>\n                            </div>\n                        </div>)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ActionLogs;\n","import React from 'react';\n\nimport './Loader.scss'\n\nconst Loader = () => (\n    <div className=\"Loader\">\n        <div/>\n        <div/>\n    </div>\n);\n\nexport default Loader;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport OutsideClickHandler from 'react-outside-click-handler'\n\nimport './Select.scss';\n\nclass Select extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    toggleDropdown = () => {\n        const {disabled} = this.props;\n        const {open} = this.state;\n\n        if (disabled) {\n            return;\n        }\n\n        this.setState({\n            open: !open,\n        });\n    };\n\n    closeDropdown = () => {\n        this.setState({\n            open: false,\n        });\n    };\n\n    handleSelect = (option) => {\n        const {field, disabled, onChange} = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        onChange(option.name, field);\n\n        this.closeDropdown();\n    };\n\n    render() {\n        const {options, disabled, value, label, placeholder} = this.props;\n        const {open} = this.state;\n\n        return (\n            <OutsideClickHandler onOutsideClick={this.closeDropdown}>\n                <div className={classNames(\n                    \"Select\",\n                    {\n                        \"Disabled\": disabled,\n                        \"Open\": open,\n                    }\n                )}>\n                    <div className=\"Label\" onClick={this.toggleDropdown}>{label}</div>\n                    <div className=\"CurrentSelection\" onClick={this.toggleDropdown}>\n                        {!!value && <span className=\"Value\">{value}</span>}\n                        {!value && <span className=\"Placeholder\">{placeholder || 'Select an option'}</span>}\n                    </div>\n                    <div className=\"SelectDropdown\">\n                        {!!options.length && options.map(option => <div className=\"DropdownOption\" key={option.name} onClick={() => this.handleSelect(option)}>\n                            {option.name}\n                        </div>)}\n                        {!options.length && <div className=\"DropdownEmpty\">\n                            <span>No options</span>\n                        </div>}\n                    </div>\n                </div>\n            </OutsideClickHandler>\n        );\n    }\n}\n\nSelect.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    value: PropTypes.string,\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Select;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.scss';\n\nconst Button = ({onClick, disabled, children, color, size}) => (\n    <button disabled={disabled} onClick={onClick} className={classNames(\n        \"Button\",\n        size,\n        color,\n    )}>\n        {children}\n    </button>\n);\n\nButton.defaultProps = {\n    color: 'invisible',\n    size: '',\n};\n\nexport default Button;\n","import Web3 from 'web3';\nimport {RPC_URI} from \"./Common/constants\";\n\nlet web3;\nlet web3Account = '0x25f5dc546ef27666c6e4ce75f470ab2b8c092a8f';\n// let web3AccountPrivKey = '0xe3eabffdf23cb34ea60612dd31ed79fcb2acb15833f3064c654d54a791a0e8e1';\n// let web3AccountPasswor   d = 'zippodev';\n\nclass EthereumClient {\n    static initialize() {\n        web3 = new Web3(RPC_URI);\n        // web3.eth.personal.newAccount(web3AccountPassword).then(account => {\n        //     web3Account = account;\n        //     console.log(account);\n        // });\n    }\n\n    static getAccounts() {\n        if (web3) {\n            console.log(web3.eth.accounts);\n        }\n    }\n\n    /**\n     *\n     * @param {Function} method\n     * @param {array} params\n     * @param {Function} callback\n     */\n    static sendTransaction(method, params, callback = () => {}) {\n        if (web3) {\n            const calledMethod = method(...params);\n            if (calledMethod.hasOwnProperty('send')) {\n                calledMethod\n                    .send({\n                        from: web3Account,\n                    }, callback)\n                    .on('transactionHash', (hash) => {\n                        console.log('transactionHash', hash);\n                    })\n                    .on('confirmation', (confirmationNumber, receipt) => {\n                        console.log('confirmation', confirmationNumber, receipt);\n                    })\n                    .on('receipt', (receipt) => {\n                        console.log('receipt', receipt);\n                    })\n                    .on('error', console.error);\n            } else if (calledMethod.hasOwnProperty('call')) {\n                calledMethod\n                    .call({\n                        from: web3Account,\n                    }, callback)\n                    .then((result) => {\n                        console.log('call result', result);\n                    });\n            }\n\n            // web3.eth.personal.unlockAccount(web3Account, web3AccountPassword, 600)\n            //     .then(() => {\n            //         method(...params).send({\n            //             from: web3Account,\n            //         }, callback);\n            //     });\n        }\n    }\n\n    static getContract(contractAbi, address) {\n        if (!web3) {\n            return null;\n        }\n\n        return web3.eth.Contract(contractAbi, address);\n    }\n}\n\nexport default EthereumClient;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './Input.scss';\n\nclass Input extends Component {\n    handleInputChange = (event) => {\n        const {disabled, onChange, field} = this.props;\n\n        const newValue = event.target.value;\n\n        if (onChange && !disabled) {\n            onChange(newValue, field, event);\n        }\n    };\n\n    render() {\n        const {placeholder, field, value, label, disabled, className} = this.props;\n\n        return (\n            <div className={classNames(\n                \"InputWrapper\",\n                className,\n                {\"disabled\": disabled,}\n            )}>\n                {!!label && <label htmlFor={`input-${field}`} className=\"InputLabel\">{label}</label>}\n                <input placeholder={placeholder} id={`input-${field}`} disabled={disabled} onChange={this.handleInputChange} type=\"text\" className=\"Input\" value={value || ''}/>\n            </div>\n        );\n    }\n}\n\nInput.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Input;\n","import React, {Component} from 'react';\n\nimport './Header.scss';\n\nimport ZippoLogo from '../../Images/ColoredDarkZippoLogo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"MainWrapper\">\n                    <div className=\"LogoWrapper\">\n                        <img src={ZippoLogo} height={44} alt=\"\"/>\n                    </div>\n                </div>\n                <div className=\"ActionsWrapper\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","export const WS_URL = process.env.REACT_APP_NODE_WS;\nexport const RPC_URI = process.env.REACT_APP_RPC_WS;\n","import React, {Component} from 'react';\n\nimport './Debugger.scss';\nimport Loader from \"../Loader/Loader\";\nimport Select from \"../Select/Select\";\nimport Button from \"../Button/Button\";\nimport Input from \"../Input/Input\";\nimport Header from \"../Header/Header\";\nimport EthereumClient from \"../../EthereumClient\";\n\nclass Debugger extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            initiallyLoaded: false,\n            contracts: [],\n            methods: {},\n            selectedContract: null,\n            selectedContractMethods: [],\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (!state.initiallyLoaded && props.contracts && !!props.contracts.length) {\n            return {\n                ...state,\n                initiallyLoaded: true,\n                contracts: props.contracts\n            };\n        }\n\n        return null;\n    }\n\n    handleInputChange = (value, field) => {\n        this.setState({\n            [field]: value,\n        });\n    };\n\n    handleMethodInputChange = (value, field) => {\n        const {methodInputs} = this.state;\n\n        this.setState({\n            methodInputs: {\n                ...methodInputs,\n                [field]: value,\n            },\n        });\n    };\n\n    isFormValid = () => {\n        const {selectedContract, selectedMethod, methodInputs, selectedMethodInputs, sendingTransaction} = this.state;\n\n        if (!selectedContract || !selectedMethod || sendingTransaction) {\n            return false;\n        }\n\n        let valid = true;\n\n        selectedMethodInputs.forEach(methodInput => {\n            if (!methodInputs[methodInput.name]) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    };\n\n    handleSelectContract = (value, field) => {\n        const {contracts} = this.state;\n\n        const selectedContract = contracts.find(contract => contract.name === value);\n\n        this.setState({\n            selectedContractMethods: selectedContract.methods,\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    handleSelectContractMethod = (value, field) => {\n        const {selectedContractMethods} = this.state;\n\n        const selectedMethod = selectedContractMethods.find(method => method.name === value);\n\n        this.setState({\n            selectedMethodInputs: selectedMethod.inputs,\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    sendTransaction = () => {\n        const {contracts, selectedContract, methodInputs, selectedMethod} = this.state;\n        const {abi} = this.props;\n\n        this.setState({\n            sendingTransaction: true,\n            transactionResult: null,\n        });\n\n        const txContract = contracts.find(contract => contract.name === selectedContract);\n\n        const transactionMethod = EthereumClient.getContract(\n            abi[txContract.address], txContract.address\n        ).methods[selectedMethod.replace('()', '')];\n\n        console.log(abi, txContract.address, transactionMethod, selectedMethod);\n\n        EthereumClient.sendTransaction(transactionMethod, Object.values(methodInputs), (error, tx) => {\n            console.log(error, tx);\n        });\n\n        setTimeout(() => {\n            this.setState({\n                sendingTransaction: false,\n                transactionResult: {\n                    message: 'something'\n                },\n            });\n        }, 5000);\n    };\n\n    render() {\n        const {\n            initiallyLoaded,\n            contracts,\n            selectedContract,\n            selectedContractMethods,\n            selectedMethod,\n            selectedMethodInputs,\n            methodInputs,\n            sendingTransaction,\n            transactionResult\n        } = this.state;\n\n        return (\n            <div className=\"Debugger\">\n                <Header/>\n                {!initiallyLoaded && <div className=\"DebuggerLoader\">\n                    <Loader/>\n                </div>}\n                {initiallyLoaded && <div className=\"DebuggerForm\">\n                    <Select value={selectedContract}\n                            options={contracts}\n                            field=\"selectedContract\"\n                            onChange={this.handleSelectContract}\n                            label=\"Contract\"\n                            disabled={sendingTransaction}\n                            placeholder=\"Select contract\"/>\n                    <Select value={selectedMethod}\n                            options={selectedContractMethods}\n                            field=\"selectedMethod\"\n                            onChange={this.handleSelectContractMethod}\n                            label=\"Method\" placeholder=\"Select contract method\"\n                            disabled={!selectedContract || sendingTransaction}/>\n                    {(!!selectedMethod && !!selectedMethodInputs.length) && <div className=\"MethodInputsWrapper\">\n                        <div className=\"InputsHeading\">Method Inputs</div>\n                        {selectedMethodInputs.map(methodInput => <div key={methodInput.name} className=\"MethodInputItem\">\n                            <div className=\"InputName\">{methodInput.name}</div>\n                            <div className=\"InputInput\">\n                                <Input value={methodInputs[methodInput.name]}\n                                       field={methodInput.name}\n                                       onChange={this.handleMethodInputChange}\n                                       placeholder={methodInput.type}/>\n                            </div>\n                        </div>)}\n                    </div>}\n                    <Button size=\"large\" disabled={!this.isFormValid()} color=\"orange\" onClick={this.sendTransaction}>\n                        <span>Send Transaction</span>\n                    </Button>\n                    {(sendingTransaction || !!transactionResult) && <div className=\"TransactionResultWrapper\">\n                        {sendingTransaction && <div className=\"ResultLoader\">\n                            <Loader/>\n                        </div>}\n                        {!sendingTransaction && <div className=\"ResultContent\">\n                            <pre className=\"Result\">{JSON.stringify(transactionResult)}</pre>\n                        </div>}\n                    </div>}\n                </div>}\n            </div>\n        );\n    }\n}\n\nexport default Debugger;\n","import React, {Component} from 'react';\nimport Websocket from 'react-websocket';\nimport Moment from 'moment';\nimport _ from 'lodash';\n\nimport './App.scss';\nimport ActionLogs from \"./Components/ActionLogs/ActionLogs\";\nimport Debugger from \"./Components/Debugger/Debugger\";\nimport {WS_URL} from \"./Common/constants\";\nimport EthereumClient from \"./EthereumClient\";\n\nfunction extractMethodsFromAbi(abi) {\n    return abi.filter(data => data.type === 'function').map(func => {\n        return {\n            ...func,\n            name: `${func.name}()`\n        };\n    });\n}\n\nclass Message {\n    constructor(data) {\n        this.level = data.level || 'info';\n        this.type = data.type || 'unknown';\n        this.data = {};\n        this.timestamp = data.timestamp || new Moment();\n    }\n}\n\nclass InitialMessage extends Message {\n    constructor(message) {\n        super(message);\n        const contracts = Object.values(message.data).map(contract => {\n            const networkId = Object.keys(contract.networks)[0];\n            const networkInfo = Object.values(contract.networks)[0];\n\n            return {\n                contractName: contract.contractName,\n                fileName: `${contract.contractName}.sol`,\n                name: `${contract.contractName}.sol`,\n                networkId,\n                address: networkInfo.address.toLowerCase(),\n                creatorTx: networkInfo.transactionHash,\n                methods: extractMethodsFromAbi(contract.abi),\n            }\n        });\n\n        const contractsDeployed = `[${contracts.map(c => c.name).join(', ')}]`;\n\n        this.data = {\n            message: `Initial deployment of ${contractsDeployed}`,\n            description: '',\n            contracts,\n        };\n    }\n}\n\n// class TransactionMessage extends Message {\n//     constructor(message) {\n//         super(message);\n//\n//     }\n//\n// }\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logs: [],\n            contracts: [],\n            contractsAbi: {},\n        };\n\n        EthereumClient.initialize();\n    }\n\n    addMessage = message => {\n        const {logs} = this.state;\n\n        this.setState({\n            logs: [\n                ...logs,\n                message,\n            ]\n        })\n    };\n\n    addMessageContracts = message => {\n        const {contracts} = this.state;\n\n        this.setState({\n            contracts: [\n                ...contracts,\n                ...message.data.contracts,\n            ]\n        })\n    };\n\n    setContractAbi = abi => {\n        const {contractsAbi} = this.state;\n\n        const contractAbi = {};\n        _.forEach(abi, (contract, address) => {\n            contractAbi[address.toLowerCase()] = contract.abi;\n        });\n\n        this.setState({\n            contractsAbi: {\n                ...contractsAbi,\n                ...contractAbi,\n            },\n        });\n    };\n\n    handleWebSocketMessage = (data) => {\n        const messageData = JSON.parse(data);\n\n        switch (messageData.type) {\n            case 'initial_message':\n                const message = new InitialMessage(messageData);\n                this.addMessage(message);\n                this.addMessageContracts(message);\n                this.setContractAbi(messageData.data);\n                return;\n            default:\n                console.log('unparsed message', messageData);\n                return;\n        }\n    };\n\n    render() {\n        const {contracts, logs, contractsAbi} = this.state;\n\n        return (\n            <div className=\"App\">\n                <Debugger contracts={contracts} abi={contractsAbi}/>\n                <ActionLogs logs={logs}/>\n                <Websocket url={WS_URL}\n                           onMessage={this.handleWebSocketMessage}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('AppRoot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}