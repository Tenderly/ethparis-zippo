{"version":3,"sources":["Images/ColoredDarkZippoLogo.svg","Components/ActionLogs/ActionLogs.js","Components/Loader/Loader.js","Components/Select/Select.js","Components/Button/Button.js","Components/Input/Input.js","Components/Icon/Icon.js","Components/Header/Header.js","Components/Debugger/Debugger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ActionLogs","react_default","a","createElement","className","Component","Loader","Select","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","disabled","open","state","setState","closeDropdown","handleSelect","option","_this$props","field","onChange","name","_this2","_this$props2","options","value","label","placeholder","react_outside_click_handler_default","onOutsideClick","classNames","Disabled","Open","onClick","length","map","key","Button","_ref","children","color","size","defaultProps","Input","handleInputChange","event","newValue","target","htmlFor","concat","id","type","Icon","icon","Header","src","ZippoLogo","height","alt","Components_Button_Button","Components_Icon_Icon","Debugger","defineProperty","handleMethodInputChange","methodInputs","objectSpread","isFormValid","_this$state","selectedContract","selectedMethod","selectedMethodInputs","sendingTransaction","valid","forEach","methodInput","handleSelectContract","methods","selectedContractMethods","transactionResult","handleSelectContractMethod","find","method","inputs","sendTransaction","console","log","setTimeout","message","initiallyLoaded","contracts","address","Calculator.sol","SafeMath.sol","_this3","_this$state2","Components_Header_Header","Components_Loader_Loader","Components_Select_Select","Components_Input_Input","JSON","stringify","App","Components_Debugger_Debugger","Components_ActionLogs_ActionLogs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45043314.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ColoredDarkZippoLogo.7e4e7e9f.svg\";","import React, {Component} from 'react';\n\nimport \"./ActionLogs.scss\";\n\nclass ActionLogs extends Component {\n    render() {\n        return (\n            <div className=\"ActionLogs\">\n                <div className=\"LogHeader\"></div>\n                <div className=\"Logs\"></div>\n            </div>\n        );\n    }\n}\n\nexport default ActionLogs;\n","import React from 'react';\n\nimport './Loader.scss'\n\nconst Loader = () => (\n    <div className=\"Loader\">\n        <div/>\n        <div/>\n    </div>\n);\n\nexport default Loader;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport OutsideClickHandler from 'react-outside-click-handler'\n\nimport './Select.scss';\n\nclass Select extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    toggleDropdown = () => {\n        const {disabled} = this.props;\n        const {open} = this.state;\n\n        if (disabled) {\n            return;\n        }\n\n        this.setState({\n            open: !open,\n        });\n    };\n\n    closeDropdown = () => {\n        this.setState({\n            open: false,\n        });\n    };\n\n    handleSelect = (option) => {\n        const {field, disabled, onChange} = this.props;\n\n        if (disabled) {\n            return;\n        }\n\n        onChange(option.name, field);\n\n        this.closeDropdown();\n    };\n\n    render() {\n        const {options, disabled, value, label, placeholder} = this.props;\n        const {open} = this.state;\n\n        return (\n            <OutsideClickHandler onOutsideClick={this.closeDropdown}>\n                <div className={classNames(\n                    \"Select\",\n                    {\n                        \"Disabled\": disabled,\n                        \"Open\": open,\n                    }\n                )}>\n                    <div className=\"Label\" onClick={this.toggleDropdown}>{label}</div>\n                    <div className=\"CurrentSelection\" onClick={this.toggleDropdown}>\n                        {!!value && <span className=\"Value\">{value}</span>}\n                        {!value && <span className=\"Placeholder\">{placeholder || 'Select an option'}</span>}\n                    </div>\n                    <div className=\"SelectDropdown\">\n                        {!!options.length && options.map(option => <div className=\"DropdownOption\" key={option.name} onClick={() => this.handleSelect(option)}>\n                            {option.name}\n                        </div>)}\n                        {!options.length && <div className=\"DropdownEmpty\">\n                            <span>No options</span>\n                        </div>}\n                    </div>\n                </div>\n            </OutsideClickHandler>\n        );\n    }\n}\n\nSelect.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired,\n    value: PropTypes.string,\n    label: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Select;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.scss';\n\nconst Button = ({onClick, disabled, children, color, size}) => (\n    <button disabled={disabled} onClick={onClick} className={classNames(\n        \"Button\",\n        size,\n        color,\n    )}>\n        {children}\n    </button>\n);\n\nButton.defaultProps = {\n    color: 'invisible',\n    size: '',\n};\n\nexport default Button;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './Input.scss';\n\nclass Input extends Component {\n    handleInputChange = (event) => {\n        const {disabled, onChange, field} = this.props;\n\n        const newValue = event.target.value;\n\n        if (onChange && !disabled) {\n            onChange(newValue, field, event);\n        }\n    };\n\n    render() {\n        const {placeholder, field, value, label, disabled, className} = this.props;\n\n        return (\n            <div className={classNames(\n                \"InputWrapper\",\n                className,\n                {\"disabled\": disabled,}\n            )}>\n                {!!label && <label htmlFor={`input-${field}`} className=\"InputLabel\">{label}</label>}\n                <input placeholder={placeholder} id={`input-${field}`} disabled={disabled} onChange={this.handleInputChange} type=\"text\" className=\"Input\" value={value || ''}/>\n            </div>\n        );\n    }\n}\n\nInput.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n};\n\nexport default Input;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './style.scss';\n\nconst Icon = ({icon}) => (\n    <i className={classNames(\n        \"ZippoIcon\",\n        `icon-${icon}`\n    )}/>\n);\n\nexport default Icon;\n","import React, {Component} from 'react';\n\nimport './Header.scss';\n\nimport ZippoLogo from '../../Images/ColoredDarkZippoLogo.svg';\nimport Button from \"../Button/Button\";\nimport Icon from \"../Icon/Icon\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"Header\">\n                <div className=\"MainWrapper\">\n                    <div className=\"LogoWrapper\">\n                        <img src={ZippoLogo} height={44} alt=\"\"/>\n                    </div>\n                </div>\n                <div className=\"ActionsWrapper\">\n                    <Button>\n                        <Icon icon=\"refresh-cw\"/>\n                        <span>Sync</span>\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\n\nimport './Debugger.scss';\nimport Loader from \"../Loader/Loader\";\nimport Select from \"../Select/Select\";\nimport Button from \"../Button/Button\";\nimport Input from \"../Input/Input\";\nimport Header from \"../Header/Header\";\n\nclass Debugger extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            initiallyLoaded: false,\n            contracts: [],\n            methods: {},\n            selectedContract: null,\n            selectedContractMethods: [],\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                initiallyLoaded: true,\n                contracts: [\n                    {\n                        name: \"Calculator.sol\",\n                        address: \"0x6B6220677b93E8fc9dC3ffE582E481B7A56c79a9\",\n                    },\n                    {\n                        name: \"SafeMath.sol\",\n                        address: \"0x6B6220677b93E8fc9dC3ffE582E481B7A56c79a9\",\n                    },\n                ],\n                methods: {\n                    \"Calculator.sol\": [\n                        {\n                            name: \"sum()\",\n                            inputs: [\n                                {\n                                    name: \"a\",\n                                    type: \"int36\"\n                                },\n                                {\n                                    name: \"b\",\n                                    type: \"int36\"\n                                },\n                            ],\n                        },\n                        {\n                            name: \"multiply()\",\n                            inputs: [\n                                {\n                                    name: \"ma\",\n                                    type: \"int36\"\n                                },\n                                {\n                                    name: \"mb\",\n                                    type: \"int36\"\n                                },\n                            ],\n                        },\n                    ],\n                    \"SafeMath.sol\": [\n                        {\n                            name: \"toBigNumber()\",\n                            inputs: [\n                                {\n                                    name: \"number\",\n                                    type: \"int36\"\n                                },\n                            ],\n                        },\n                    ]\n                },\n            });\n        }, 1000);\n    }\n\n    handleInputChange = (value, field) => {\n        this.setState({\n            [field]: value,\n        });\n    };\n\n    handleMethodInputChange = (value, field) => {\n        const {methodInputs} = this.state;\n\n        this.setState({\n            methodInputs: {\n                ...methodInputs,\n                [field]: value,\n            },\n        });\n    };\n\n    isFormValid = () => {\n        const {selectedContract, selectedMethod, methodInputs, selectedMethodInputs, sendingTransaction} = this.state;\n\n        if (!selectedContract || !selectedMethod || sendingTransaction) {\n            return false;\n        }\n\n        let valid = true;\n\n        selectedMethodInputs.forEach(methodInput => {\n            if (!methodInputs[methodInput.name]) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    };\n\n    handleSelectContract = (value, field) => {\n        const {methods} = this.state;\n\n        this.setState({\n            selectedContractMethods: methods[value],\n            selectedMethod: null,\n            selectedMethodInputs: [],\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    handleSelectContractMethod = (value, field) => {\n        const {selectedContractMethods} = this.state;\n\n        const selectedMethod = selectedContractMethods.find(method => method.name === value);\n\n        this.setState({\n            selectedMethodInputs: selectedMethod.inputs,\n            methodInputs: {},\n            sendingTransaction: false,\n            transactionResult: null,\n        });\n\n        this.handleInputChange(value, field);\n    };\n\n    sendTransaction = () => {\n        console.log(this.state);\n        this.setState({\n            sendingTransaction: true,\n            transactionResult: null,\n        });\n\n        setTimeout(() => {\n            this.setState({\n                sendingTransaction: false,\n                transactionResult: {\n                    message: 'something'\n                },\n            });\n        }, 5000);\n    };\n\n    render() {\n        const {\n            initiallyLoaded,\n            contracts,\n            selectedContract,\n            selectedContractMethods,\n            selectedMethod,\n            selectedMethodInputs,\n            methodInputs,\n            sendingTransaction,\n            transactionResult\n        } = this.state;\n\n        return (\n            <div className=\"Debugger\">\n                <Header/>\n                {!initiallyLoaded && <div className=\"DebuggerLoader\">\n                    <Loader/>\n                </div>}\n                {initiallyLoaded && <div className=\"DebuggerForm\">\n                    <Select value={selectedContract}\n                            options={contracts}\n                            field=\"selectedContract\"\n                            onChange={this.handleSelectContract}\n                            label=\"Contract\"\n                            disabled={sendingTransaction}\n                            placeholder=\"Select contract\"/>\n                    <Select value={selectedMethod}\n                            options={selectedContractMethods}\n                            field=\"selectedMethod\"\n                            onChange={this.handleSelectContractMethod}\n                            label=\"Method\" placeholder=\"Select contract method\"\n                            disabled={!selectedContract || sendingTransaction}/>\n                    {(!!selectedMethod && selectedMethodInputs.length) && <div className=\"MethodInputsWrapper\">\n                        <div className=\"InputsHeading\">Method Inputs</div>\n                        {selectedMethodInputs.map(methodInput => <div key={methodInput.name} className=\"MethodInputItem\">\n                            <div className=\"InputName\">{methodInput.name}</div>\n                            <div className=\"InputInput\">\n                                <Input value={methodInputs[methodInput.name]}\n                                       field={methodInput.name}\n                                       onChange={this.handleMethodInputChange}\n                                       placeholder={methodInput.type}/>\n                            </div>\n                        </div>)}\n                    </div>}\n                    <Button disabled={!this.isFormValid()} color=\"orange\" onClick={this.sendTransaction}>\n                        <span>Send Transaction</span>\n                    </Button>\n                    {(sendingTransaction || !!transactionResult) && <div className=\"TransactionResultWrapper\">\n                        {sendingTransaction && <div className=\"ResultLoader\">\n                            <Loader/>\n                        </div>}\n                        {!sendingTransaction && <div className=\"ResultContent\">\n                            <pre className=\"Result\">{JSON.stringify(transactionResult)}</pre>\n                        </div>}\n                    </div>}\n                </div>}\n            </div>\n        );\n    }\n}\n\nexport default Debugger;\n","import React, { Component } from 'react';\n\nimport './App.scss';\nimport ActionLogs from \"./Components/ActionLogs/ActionLogs\";\nimport Debugger from \"./Components/Debugger/Debugger\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Debugger/>\n        <ActionLogs/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('AppRoot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}